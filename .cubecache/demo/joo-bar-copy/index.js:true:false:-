{"queryPath":"/demo/joo-bar-copy/index.js","absPath":"/Users/joo/Desktop/code/datav/demo/joo-bar-copy/index.js","realPath":"/demo/joo-bar-copy/index.js","type":"script","source":"var Event = require(\"bcore/event\");\nvar $ = require(\"jquery\");\nvar _ = require(\"lodash\");\n//var Chart = require('XXX');\nvar EChart = require(\"echarts\");\nvar Utils = require(\"datav:/com/maliang-echarts-utils/0.0.18\");\n\n/**\n * 马良基础类\n */\nmodule.exports = Event.extend(\n  function Base(container, config) {\n    console.log(\"base\", container, config);\n    this.config = {\n      series: [],\n      yAxis: { data: [], type: \"value\" },\n      xAxis: { data: [], type: \"category\" },\n      legend: { data: [] },\n    };\n    this.container = $(container); //容器\n    this.apis = config.apis; //hook一定要有\n    this._data = null; //数据\n    this.chart = null; //图表\n    this.init(config);\n  },\n  {\n    /**\n     * 公有初始化\n     */\n    init: function (config) {\n      console.log(\"init\", config);\n      config = this.mergeConfig(config);\n      this.chart = EChart.init(this.container[0]);\n      this.chart.setOption(Utils.config2echartsOptions(config));\n    },\n    /**\n     * 绘制\n     */\n    render: function (data, config) {\n      console.log(\"render\", data, config);\n      config = this.mergeConfig(config);\n      data = this.data(data);\n      var cfg = Utils.config2echartsOptions(\n        this.mergeConfig(Utils.data2echartsAxis(data, config))\n      );\n      this.chart.setOption(cfg);\n      //emit\n      this.container.on(\"click\", () => {\n        console.log(\"click\");\n        this.emit(\"click\", { value: \"test\" });\n      });\n    },\n    /**\n     * 数据,设置和获取数据\n     * @param data\n     * @returns {*|number}\n     */\n    data: function (data) {\n      console.log(\"data\", data);\n      if (data) {\n        this._data = data;\n      }\n      return this._data;\n    },\n    /**\n     * 合并配置\n     */\n    mergeConfig: function (config) {\n      if (!config) {\n        return this.config;\n      }\n      if (config.xAxis && config.xAxis.axisLine) {\n        config.xAxis.name = config.xAxis.tName;\n        config.xAxis.axisLine.lineStyle.type =\n          config.xAxis.axisLine.lineStyle.sType;\n        config.xAxis.axisTick.lineStyle.type =\n          config.xAxis.axisTick.lineStyle.sType;\n        config.xAxis.splitLine.lineStyle.type =\n          config.xAxis.splitLine.lineStyle.sType;\n        config.xAxis.axisPointer.type = config.xAxis.axisPointer.lType;\n        config.xAxis.axisPointer.lineStyle.type =\n          config.xAxis.axisPointer.lineStyle.sType;\n      }\n      if (config.yAxis && config.yAxis.axisLine) {\n        config.yAxis.name = config.yAxis.tName;\n        config.yAxis.axisLine.lineStyle.type =\n          config.yAxis.axisLine.lineStyle.sType;\n        config.yAxis.axisTick.lineStyle.type =\n          config.yAxis.axisTick.lineStyle.sType;\n        config.yAxis.splitLine.lineStyle.type =\n          config.yAxis.splitLine.lineStyle.sType;\n        config.yAxis.axisPointer.type = config.yAxis.axisPointer.lType;\n        config.yAxis.axisPointer.lineStyle.type =\n          config.yAxis.axisPointer.lineStyle.sType;\n      }\n      if (config.series) {\n        config.series.forEach((d, i) => {\n          if (d.data) {\n            this.config.series[i].data = d.data;\n          }\n          this.config.series[i] = _.defaultsDeep(\n            d || {},\n            this.config.series[i]\n          );\n          this.config.series[i].type = \"bar\";\n        });\n        this.config.series = _.take(this.config.series, config.series.length);\n      }\n      if (config.xAxis.data) {\n        this.config.xAxis.data = config.xAxis.data;\n      }\n      this.config = _.defaultsDeep(config || {}, this.config);\n      this.config.legend.data = _.map(this.config.series, \"name\");\n      console.log(\"merge\", this.config);\n      return this.config;\n    },\n    /**\n     * 更新样式\n     * 有些子组件控制不到的,但是需要控制改变的,在这里实现\n     */\n    updateStyle: function () {\n      var cfg = this.config;\n      // this.container.css({\n      //   \"font-size\": cfg.size + \"px\",\n      //   color: cfg.color || \"#fff\",\n      // });\n    },\n    /**\n     *缩放，当组件被拖拽、缩放时被调用。\n     */\n    resize: function (width, height) {\n      this.chart.resize({\n        width,\n        height,\n      });\n    },\n    /**\n     * 清理，当组件被清理时被调用。\n     */\n    clear: function () {\n      this.chart && this.chart.clear && this.chart.clear();\n    },\n    /**\n     * 销毁组件\n     */\n    destroy: function () {\n      this.chart && this.chart.dispose && this.chart.dispose();\n    },\n    /**\n     * 处理自定义配置项的handler\n     */\n    handleCustomItem: function () {\n      console.log(\"custom handler\");\n    },\n    /**\n     * select动作\n     */\n    select: function (data) {\n      console.log(\"select data\", data);\n    },\n  }\n);\n","code":"\"use strict\";\n\nvar Event = require(\"bcore/event\");\nvar $ = require(\"jquery\");\nvar _ = require(\"lodash\");\n\nvar EChart = require(\"echarts\");\nvar Utils = require(\"datav:/com/maliang-echarts-utils/0.0.18\");\n\nmodule.exports = Event.extend(function Base(container, config) {\n  console.log(\"base\", container, config);\n  this.config = {\n    series: [],\n    yAxis: { data: [], type: \"value\" },\n    xAxis: { data: [], type: \"category\" },\n    legend: { data: [] }\n  };\n  this.container = $(container);\n  this.apis = config.apis;\n  this._data = null;\n  this.chart = null;\n  this.init(config);\n}, {\n  init: function init(config) {\n    console.log(\"init\", config);\n    config = this.mergeConfig(config);\n    this.chart = EChart.init(this.container[0]);\n    this.chart.setOption(Utils.config2echartsOptions(config));\n  },\n\n  render: function render(data, config) {\n    var _this = this;\n\n    console.log(\"render\", data, config);\n    config = this.mergeConfig(config);\n    data = this.data(data);\n    var cfg = Utils.config2echartsOptions(this.mergeConfig(Utils.data2echartsAxis(data, config)));\n    this.chart.setOption(cfg);\n\n    this.container.on(\"click\", function () {\n      console.log(\"click\");\n      _this.emit(\"click\", { value: \"test\" });\n    });\n  },\n\n  data: function data(_data) {\n    console.log(\"data\", _data);\n    if (_data) {\n      this._data = _data;\n    }\n    return this._data;\n  },\n\n  mergeConfig: function mergeConfig(config) {\n    var _this2 = this;\n\n    if (!config) {\n      return this.config;\n    }\n    if (config.xAxis && config.xAxis.axisLine) {\n      config.xAxis.name = config.xAxis.tName;\n      config.xAxis.axisLine.lineStyle.type = config.xAxis.axisLine.lineStyle.sType;\n      config.xAxis.axisTick.lineStyle.type = config.xAxis.axisTick.lineStyle.sType;\n      config.xAxis.splitLine.lineStyle.type = config.xAxis.splitLine.lineStyle.sType;\n      config.xAxis.axisPointer.type = config.xAxis.axisPointer.lType;\n      config.xAxis.axisPointer.lineStyle.type = config.xAxis.axisPointer.lineStyle.sType;\n    }\n    if (config.yAxis && config.yAxis.axisLine) {\n      config.yAxis.name = config.yAxis.tName;\n      config.yAxis.axisLine.lineStyle.type = config.yAxis.axisLine.lineStyle.sType;\n      config.yAxis.axisTick.lineStyle.type = config.yAxis.axisTick.lineStyle.sType;\n      config.yAxis.splitLine.lineStyle.type = config.yAxis.splitLine.lineStyle.sType;\n      config.yAxis.axisPointer.type = config.yAxis.axisPointer.lType;\n      config.yAxis.axisPointer.lineStyle.type = config.yAxis.axisPointer.lineStyle.sType;\n    }\n    if (config.series) {\n      config.series.forEach(function (d, i) {\n        if (d.data) {\n          _this2.config.series[i].data = d.data;\n        }\n        _this2.config.series[i] = _.defaultsDeep(d || {}, _this2.config.series[i]);\n        _this2.config.series[i].type = \"bar\";\n      });\n      this.config.series = _.take(this.config.series, config.series.length);\n    }\n    if (config.xAxis.data) {\n      this.config.xAxis.data = config.xAxis.data;\n    }\n    this.config = _.defaultsDeep(config || {}, this.config);\n    this.config.legend.data = _.map(this.config.series, \"name\");\n    console.log(\"merge\", this.config);\n    return this.config;\n  },\n\n  updateStyle: function updateStyle() {\n    var cfg = this.config;\n  },\n\n  resize: function resize(width, height) {\n    this.chart.resize({\n      width: width,\n      height: height\n    });\n  },\n\n  clear: function clear() {\n    this.chart && this.chart.clear && this.chart.clear();\n  },\n\n  destroy: function destroy() {\n    this.chart && this.chart.dispose && this.chart.dispose();\n  },\n\n  handleCustomItem: function handleCustomItem() {\n    console.log(\"custom handler\");\n  },\n\n  select: function select(data) {\n    console.log(\"select data\", data);\n  }\n});","codeWraped":"Cube(\"/demo/joo-bar-copy/index.js\", [\"/demo/joo-bar-copy/node_modules/bcore/event.js\", \"/demo/joo-bar-copy/node_modules/jquery/dist/jquery.js\", \"/demo/joo-bar-copy/node_modules/lodash/lodash.js\", \"/demo/joo-bar-copy/node_modules/echarts/dist/echarts.js\", \"datav:/com/maliang-echarts-utils/0.0.18\"], function (module, exports, require, load, process, global) {\n\n  var Event = require('/demo/joo-bar-copy/node_modules/bcore/event.js');\n  var $ = require('/demo/joo-bar-copy/node_modules/jquery/dist/jquery.js');\n  var _ = require('/demo/joo-bar-copy/node_modules/lodash/lodash.js');\n\n  var EChart = require('/demo/joo-bar-copy/node_modules/echarts/dist/echarts.js');\n  var Utils = require(\"datav:/com/maliang-echarts-utils/0.0.18\");\n\n  module.exports = Event.extend(function Base(container, config) {\n    console.log(\"base\", container, config);\n    this.config = {\n      series: [],\n      yAxis: { data: [], type: \"value\" },\n      xAxis: { data: [], type: \"category\" },\n      legend: { data: [] } };\n\n    this.container = $(container);\n    this.apis = config.apis;\n    this._data = null;\n    this.chart = null;\n    this.init(config);\n  }, {\n    init: function init(config) {\n      console.log(\"init\", config);\n      config = this.mergeConfig(config);\n      this.chart = EChart.init(this.container[0]);\n      this.chart.setOption(Utils.config2echartsOptions(config));\n    },\n\n    render: function render(data, config) {\n      var _this = this;\n\n      console.log(\"render\", data, config);\n      config = this.mergeConfig(config);\n      data = this.data(data);\n      var cfg = Utils.config2echartsOptions(this.mergeConfig(Utils.data2echartsAxis(data, config)));\n      this.chart.setOption(cfg);\n\n      this.container.on(\"click\", function () {\n        console.log(\"click\");\n        _this.emit(\"click\", { value: \"test\" });\n      });\n    },\n\n    data: function data(_data) {\n      console.log(\"data\", _data);\n      if (_data) {\n        this._data = _data;\n      }\n      return this._data;\n    },\n\n    mergeConfig: function mergeConfig(config) {\n      var _this2 = this;\n\n      if (!config) {\n        return this.config;\n      }\n      if (config.xAxis && config.xAxis.axisLine) {\n        config.xAxis.name = config.xAxis.tName;\n        config.xAxis.axisLine.lineStyle.type = config.xAxis.axisLine.lineStyle.sType;\n        config.xAxis.axisTick.lineStyle.type = config.xAxis.axisTick.lineStyle.sType;\n        config.xAxis.splitLine.lineStyle.type = config.xAxis.splitLine.lineStyle.sType;\n        config.xAxis.axisPointer.type = config.xAxis.axisPointer.lType;\n        config.xAxis.axisPointer.lineStyle.type = config.xAxis.axisPointer.lineStyle.sType;\n      }\n      if (config.yAxis && config.yAxis.axisLine) {\n        config.yAxis.name = config.yAxis.tName;\n        config.yAxis.axisLine.lineStyle.type = config.yAxis.axisLine.lineStyle.sType;\n        config.yAxis.axisTick.lineStyle.type = config.yAxis.axisTick.lineStyle.sType;\n        config.yAxis.splitLine.lineStyle.type = config.yAxis.splitLine.lineStyle.sType;\n        config.yAxis.axisPointer.type = config.yAxis.axisPointer.lType;\n        config.yAxis.axisPointer.lineStyle.type = config.yAxis.axisPointer.lineStyle.sType;\n      }\n      if (config.series) {\n        config.series.forEach(function (d, i) {\n          if (d.data) {\n            _this2.config.series[i].data = d.data;\n          }\n          _this2.config.series[i] = _.defaultsDeep(d || {}, _this2.config.series[i]);\n          _this2.config.series[i].type = \"bar\";\n        });\n        this.config.series = _.take(this.config.series, config.series.length);\n      }\n      if (config.xAxis.data) {\n        this.config.xAxis.data = config.xAxis.data;\n      }\n      this.config = _.defaultsDeep(config || {}, this.config);\n      this.config.legend.data = _.map(this.config.series, \"name\");\n      console.log(\"merge\", this.config);\n      return this.config;\n    },\n\n    updateStyle: function updateStyle() {\n      var cfg = this.config;\n    },\n\n    resize: function resize(width, height) {\n      this.chart.resize({\n        width: width,\n        height: height });\n\n    },\n\n    clear: function clear() {\n      this.chart && this.chart.clear && this.chart.clear();\n    },\n\n    destroy: function destroy() {\n      this.chart && this.chart.dispose && this.chart.dispose();\n    },\n\n    handleCustomItem: function handleCustomItem() {\n      console.log(\"custom handler\");\n    },\n\n    select: function select(data) {\n      console.log(\"select data\", data);\n    } });return module.exports;});","sourceMap":null,"modifyTime":1648384025768,"mime":"application/javascript","wrap":true,"skip":false,"compress":false,"ext":".js","targetExt":".js","loads":[],"originalLoads":[],"requires":["/demo/joo-bar-copy/node_modules/bcore/event.js","/demo/joo-bar-copy/node_modules/jquery/dist/jquery.js","/demo/joo-bar-copy/node_modules/lodash/lodash.js","/demo/joo-bar-copy/node_modules/echarts/dist/echarts.js","datav:/com/maliang-echarts-utils/0.0.18"],"requiresOrigin":["/demo/joo-bar-copy/node_modules/bcore/event.js","/demo/joo-bar-copy/node_modules/jquery/dist/jquery.js","/demo/joo-bar-copy/node_modules/lodash/lodash.js","/demo/joo-bar-copy/node_modules/echarts/dist/echarts.js","datav:/com/maliang-echarts-utils/0.0.18"],"debugInfo":[],"requiresArgsRefer":[{"type":"StringLiteral","start":35,"end":48,"loc":{"start":{"line":3,"column":20},"end":{"line":3,"column":33}},"extra":{"rawValue":"bcore/event","raw":"\"bcore/event\""},"value":"/demo/joo-bar-copy/node_modules/bcore/event.js"},{"type":"StringLiteral","start":67,"end":75,"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":24}},"extra":{"rawValue":"jquery","raw":"\"jquery\""},"value":"/demo/joo-bar-copy/node_modules/jquery/dist/jquery.js"},{"type":"StringLiteral","start":94,"end":102,"loc":{"start":{"line":5,"column":16},"end":{"line":5,"column":24}},"extra":{"rawValue":"lodash","raw":"\"lodash\""},"value":"/demo/joo-bar-copy/node_modules/lodash/lodash.js"},{"type":"StringLiteral","start":127,"end":136,"loc":{"start":{"line":7,"column":21},"end":{"line":7,"column":30}},"extra":{"rawValue":"echarts","raw":"\"echarts\""},"value":"/demo/joo-bar-copy/node_modules/echarts/dist/echarts.js"},{"type":"StringLiteral","start":159,"end":200,"loc":{"start":{"line":8,"column":20},"end":{"line":8,"column":61}},"extra":{"rawValue":"datav:/com/maliang-echarts-utils/0.0.18","raw":"\"datav:/com/maliang-echarts-utils/0.0.18\""},"value":"datav:/com/maliang-echarts-utils/0.0.18"}]}